
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.openapi.generator'  version '5.3.0'
}

apply plugin: "org.openapi.generator"

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "16"

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/Helloworld.yaml".toString()
    outputDir = "$buildDir/gen".toString()
    apiPackage = "com.example.tutorial"
    invokerPackage = "com.example.tutorial.invoker"
    modelPackage = "com.example.tutorial.model"
    configOptions = [
            dateLibrary: "java8" ,
            interfaceOnly: "true"

    ]
    globalProperties = [
            modelDocs: "false"
    ]
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    // set to true and set environment variable {LANG}_POST_PROCESS_FILE
    // (e.g. SCALA_POST_PROCESS_FILE) to the linter/formatter to be processed.
    // This command will be passed one file at a time for most supported post processors.
    enablePostProcessFile = false
}

compileJava.dependsOn tasks.openApiGenerate

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module : 'spring-boot-starter-logging'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.kafka:spring-kafka'
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.307')
    implementation 'com.github.derjust:spring-data-dynamodb:5.1.0'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'io.projectreactor:reactor-core:3.4.24'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'software.amazon.awssdk:dynamodb:2.20.109'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.76.Final:osx-aarch_64")
    implementation "org.slf4j:slf4j-simple:2.0.7"
    implementation 'org.apache.kafka:kafka-streams:3.4.0'
    implementation ('org.apache.kafka:kafka-clients') {
        version {
            strictly '3.4.0'
        }
    }
    implementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation "org.apache.kafka:kafka-streams-test-utils:3.4.0"
    testImplementation "junit:junit:4.13.2"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_16
